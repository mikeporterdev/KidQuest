package com.michael.kidquest.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.michael.kidquest.custommodel.DifficultyLevel;
import com.michael.kidquest.propertyconverters.DifficultyConverter;

import com.michael.kidquest.model.Quest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUEST".
*/
public class QuestDao extends AbstractDao<Quest, Long> {

    public static final String TABLENAME = "QUEST";

    /**
     * Properties of entity Quest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Completed = new Property(3, Boolean.class, "completed", false, "COMPLETED");
        public final static Property DifficultyLevel = new Property(4, String.class, "difficultyLevel", false, "DIFFICULTY_LEVEL");
    };

    private final DifficultyConverter difficultyLevelConverter = new DifficultyConverter();

    public QuestDao(DaoConfig config) {
        super(config);
    }
    
    public QuestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUEST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"COMPLETED\" INTEGER," + // 3: completed
                "\"DIFFICULTY_LEVEL\" TEXT);"); // 4: difficultyLevel
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUEST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Quest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Boolean completed = entity.getCompleted();
        if (completed != null) {
            stmt.bindLong(4, completed ? 1L: 0L);
        }
 
        DifficultyLevel difficultyLevel = entity.getDifficultyLevel();
        if (difficultyLevel != null) {
            stmt.bindString(5, difficultyLevelConverter.convertToDatabaseValue(difficultyLevel));
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Quest readEntity(Cursor cursor, int offset) {
        Quest entity = new Quest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // completed
            cursor.isNull(offset + 4) ? null : difficultyLevelConverter.convertToEntityProperty(cursor.getString(offset + 4)) // difficultyLevel
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Quest entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompleted(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setDifficultyLevel(cursor.isNull(offset + 4) ? null : difficultyLevelConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Quest entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Quest entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
